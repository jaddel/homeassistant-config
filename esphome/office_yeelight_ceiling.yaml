#Variables
substitutions:
  device_name: office_yeelight_ceiling
  friendly_name: Office Ceiling

esphome:
  name: ${device_name}
  platform: ESP32
  board: esp32dev
  build_path: ./build/${device_name}


globals:
  - id: light_mode
    type: int
    initial_value: "1"
  - id: bootloop
    type: bool
    initial_value: "false"
    restore_value: true
  - id: bootloop_counter
    type: int
    restore_value: true

#wifi:
#  use_address: 10.25.30.200
#  power_save_mode: none

ota:
  safe_mode: True
  num_attempts: 3
  id: ota_id

packages:
  #Wifi Settings
  wifi: !include includes/network.yaml

#esp32_ble_tracker:
#  scan_parameters:
#    interval: 320ms
#    window: 100ms
#
#xiaomi_ylyk01yl:
#  mac_address: "64:88:FF:6A:97:69"
#  last_button_pressed:
#    name: "last button pressed"
#  on_button_on:
#    then:
#      - logger.log: "Button on pressed"
#      - if:
#          condition:
#            lambda: "return (id(light_mode) = 1);"
#          then:
#            - light.turn_on: day_light
#      - if:
#          condition:
#            lambda: "return (id(light_mode) = 0);"
#          then:
#            - light.turn_on: day_light
#
#  on_button_off:
#    then:
#      - logger.log: "Button on pressed"
#      - if:
#          condition:
#            lambda: "return (id(light_mode) = 1);"
#          then:
#            - light.turn_off: day_light
#      - if:
#          condition:
#            lambda: "return (id(light_mode) = 0);"
#          then:
#            - light.turn_off: day_light
#
#  on_button_sun:
#    then:
#      - logger.log: "Button sun pressed"
#
#  on_button_m:
#    then:
#      - logger.log: "Button m pressed"
#      - if:
#          condition:
#            lambda: "return (id(light_mode) = 1);"
#          then:
#            - globals.set:
#                id: light_mode
#                value: "0"
#      - if:
#          condition:
#            lambda: "return (id(light_mode) = 0);"
#          then:
#            - globals.set:
#                id: light_mode
#                value: "1"
#
#  on_button_plus:
#    then:
#      if:
#        condition:
#          lambda: "return (id(light_mode) = 1);"
#        then:
#          - light.dim_relative:
#              id: day_light
#              relative_brightness: 5%
#              transition_length: 0.1s
#          - logger.log: "Button plus pressed"
#  on_button_minus:
#    then:
#      if:
#        condition:
#          lambda: "return (id(light_mode) = 0);"
#        then:
#          - light.dim_relative:
#              id: day_light
#              relative_brightness: -5%
#              transition_length: 0.1s
#          - logger.log: "Button minus pressed"

sensor:
  - platform: adc
    pin: GPIO36
    name: "${friendly_name} adc1"
    attenuation: 11db
    internal: true
  - platform: adc
    pin: GPIO32
    name: "${friendly_name} adc2"
    attenuation: 11db
    internal: true

output:
  - platform: ledc
    pin: GPIO19
    id: output_warm
    frequency: 4882Hz

  - platform: ledc
    pin: GPIO21
    id: output_cold
    frequency: 4882Hz

  - platform: ledc
    pin: GPIO23
    id: output_nightlight
    frequency: 9765Hz

light:
  - platform: monochromatic
    name: "${friendly_name} Nightlight"
    id: night_light
    output: output_nightlight
    gamma_correct: 0
    on_turn_on:
      - light.turn_off: day_light
  - platform: cwww
    name: "${friendly_name}"
    id: day_light
    cold_white: output_cold
    warm_white: output_warm
    cold_white_color_temperature: 6500 K
    warm_white_color_temperature: 2700 K
    gamma_correct: 0
    constant_brightness: on
    on_turn_on:
      - light.turn_off: night_light

switch:
  - platform: restart
    name: "${friendly_name} Restart"
    id: restart_esp

  - platform: template
    name: "${friendly_name} Bootloop after reboot"
    lambda: |-
      return id(bootloop);
    turn_on_action:
      - globals.set:
          id: bootloop
          value: "true"
    turn_off_action:
      - globals.set:
          id: bootloop
          value: "false"
