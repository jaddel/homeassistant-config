# If you change the light for a sitch or the other way around, 
# make shure to also change
# the automation service call "light.turn_off" / "swich.turn_off".

#Variables
substitutions:
  device_name: shelly_5_25_kitchen
  node_name: Shelly25 Kitchen
  # Name for the relays
  channel_1: Kitchen Spot
  channel_2: Kitchen Exhaust Fan
  max_power: "2000.0" # watt
  max_temp: "80.0" # °C

# Basic Config
esphome:
  name: "${device_name}"
  platform: ESP8266
  board: esp01_1m
  build_path: ./build/${device_name}

wifi:
  use_address: 10.25.30.107

packages:
  #Wifi Settings
  wifi: !include includes/network.yaml

#Device Specific Config

script:
  - id: protection_temp
    then:
      - light.turn_off: channel_1
      - fan.turn_off: channel_2
      - homeassistant.service:
          service: persistent_notification.create
          data:
            title: Message from ${node_name}
          data_template:
            message: Switch turned off because temperature exceeded ${max_temp}°C
  - id: protection_power
    then:
      - light.turn_off: channel_1
      - fan.turn_off: channel_2
      - homeassistant.service:
          service: persistent_notification.create
          data:
            title: Message from ${node_name}
          data_template:
            message: Switch turned off because power exceeded ${max_power}°C

i2c:
  sda: GPIO12
  scl: GPIO14

sensor:
  - platform: ade7953
    irq_pin: GPIO16
    voltage:
      name: ${node_name} Voltage
    current_a:
      name: ${channel_1} Current
    active_power_a:
      name: ${channel_1} Power
      id: channel_1_power
      filters:
        - multiply: 1
      on_value_range:
      - above: ${max_power}
        then:
          - script.execute: protection_power
    current_b:
      name: ${channel_2} Current
    active_power_b:
      name: ${channel_2} Power
      id: channel_2_power
      filters:
        - multiply: 1
      on_value_range:
      - above: ${max_power}
        then:
          - script.execute: protection_power
    update_interval: 60s

  # NTC Temperature
  - platform: ntc
    sensor: temp_resistance_reading
    name: ${node_name} Temperature
    calibration:
      b_constant: 3350
      reference_resistance: 10kOhm
      reference_temperature: 298.15K
    
    on_value_range:
    - above: ${max_temp}
      then:
        - script.execute: protection_temp
  - platform: resistance
    id: temp_resistance_reading
    sensor: temp_analog_reading
    configuration: DOWNSTREAM
    resistor: 32kOhm
  - platform: adc
    id: temp_analog_reading
    pin: A0



## Changed to always off under switch component
#status_led:
#  pin:
#    number: GPIO0
#    inverted: yes



    
## Added to turn off status led
switch:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
    id: status_light
    restore_mode: ALWAYS_OFF
    internal: true

output:
  - platform: gpio
    pin: GPIO15
    id: out_channel_1
  - platform: gpio
    pin: GPIO4
    id: out_channel_2

fan:
  - platform: binary
    output: out_channel_2
    name: "${channel_2}"
    id: channel_2

light:
  - platform: binary
    name: "${channel_1}"
    restore_mode: RESTORE_DEFAULT_OFF
    output: out_channel_1
    id: channel_1

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO13
    name: "${channel_1}"
    on_state:
      then:
        - light.toggle: channel_1
    internal: true

  - platform: gpio
    pin:
      number: GPIO5
    name: "${channel_2}"
    on_state:
      then:
        - fan.toggle: channel_2
    internal: true

#Needs to stay added to prevent the shelly from overheating.
  - platform: gpio
    pin: GPIO16
    name: "ade7953 IRQ pin"
    internal: true
